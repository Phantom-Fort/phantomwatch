import os
import sys
import json
import requests
import subprocess
from datetime import datetime

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from config.config import CONFIG
from .utils import log_event, init_db, store_result, save_output

# Initialize database
init_db()

# API Keys
ANYRUN_API_KEY = CONFIG.get("ANYRUN_API_KEY", "")
HYBRIDANALYSIS_API_KEY = CONFIG.get("HYBRIDANALYSIS_API_KEY", "")
MALWARE_SAMPLE = CONFIG.get("MALWARE_SAMPLE", "../samples/malware.exe")
OUTPUT_FILE = CONFIG.get("MALWARE_REPORT", "../output/malware_analysis.json")

def run_static_analysis(file_path):
    """Perform static analysis on a malware sample."""
    if not os.path.exists(file_path):
        log_event(f"File {file_path} not found!", "error")
        return {}
    
    try:
        result = subprocess.run(
            ["strings", file_path], capture_output=True, text=True
        )
        strings_output = result.stdout.split("\n")

        metadata = {
            "file": file_path,
            "timestamp": datetime.now().isoformat(),
            "ioc": strings_output[:50]  # Extract first 50 strings as potential IOCs
        }
        store_result("malware_analysis", file_path, "static_analysis")
        log_event(f"Static analysis completed for {file_path}", "info")
        return metadata
    except Exception as e:
        log_event(f"Static analysis failed: {e}", "error")
        return {}


def run_dynamic_analysis(file_path):
    ANYRUN_API_URL = CONFIG.get("ANYRUN_API_URL")
    """Send the malware sample to ANY.RUN sandbox for analysis."""
    if not ANYRUN_API_KEY:
        log_event("ANY.RUN API key is missing.", "error")
        return {}
    
    try:
        url = {ANYRUN_API_URL}/file_path
        headers = {"Authorization": f"Bearer {ANYRUN_API_KEY}"}
        files = {"file": open(file_path, "rb")}
        response = requests.post(url, headers=headers, files=files)
        
        if response.status_code == 200:
            result = response.json()
            log_event(f"Dynamic analysis submitted for {file_path}", "info")
            return result
        else:
            log_event(f"ANY.RUN submission failed: {response.text}", "error")
            return {}
    except Exception as e:
        log_event(f"Dynamic analysis error: {e}", "error")
        return {}


def fetch_threat_intelligence(hash_value):
    HYBRIDANALYSIS_API_URL = CONFIG.get("HYBRIDANALYSIS_API_URL")
    """Fetch additional intelligence from HybridAnalysis."""
    if not HYBRIDANALYSIS_API_KEY:
        log_event("HybridAnalysis API key is missing.", "error")
        return {}
    
    try:
        url = {HYBRIDANALYSIS_API_URL}/{hash_value}
        headers = {"api-key": HYBRIDANALYSIS_API_KEY, "User-Agent": "Falcon"}
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            log_event(f"Threat intelligence retrieved for hash {hash_value}")
            return response.json()
        else:
            log_event(f"HybridAnalysis request failed: {response.text}", "error")
            return {}
    except Exception as e:
        log_event(f"Threat intelligence error: {e}", "error")
        return {}

def run(sample_file):
    """Executes malware analysis on a given sample file."""
    
    if not sample_file or not os.path.isfile(sample_file):
        print(f"[-] Error: Invalid or missing sample file '{sample_file}'.")
        return

    print(f"[+] Analyzing malware sample: {sample_file}")

    try:
        static_results = run_static_analysis(sample_file) or {}
        dynamic_results = run_dynamic_analysis(sample_file) or {}

        hash_value = static_results.get("hash", "")
        threat_intel = fetch_threat_intelligence(hash_value) if hash_value else {}

        final_results = {
            "static_analysis": static_results,
            "dynamic_analysis": dynamic_results,
            "threat_intelligence": threat_intel
        }
        
        save_output(final_results, OUTPUT_FILE)
        store_result("malware_analysis", sample_file, "analysis_completed")

        print("[+] Malware analysis completed successfully.")

    except Exception as e:
        print(f"[-] Error during analysis: {e}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python -m modules.malware_analysis <sample_file>")
        sys.exit(1)

    sample_file = sys.argv[1]  # Get malware sample path from CLI
    run(sample_file)

