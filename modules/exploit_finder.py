import subprocess
import json
import sys
import os
from loguru import logger

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from core.output_formatter import OutputFormatter
from .utils import store_result, save_output

logger.add("logs/phantomwatch.log", rotation="10MB", level="INFO", format="{time} | {level} | {message}")
logger.add("logs/error.log", rotation="10MB", level="ERROR", format="{time} | {level} | {message}")

def log_message(message, msg_type="info"):
    """Logs messages using OutputFormatter."""
    OutputFormatter.log_message(message, msg_type)

def search_exploit(query):
    """
    Searches for exploits using searchsploit.
    
    :param query: CVE ID or software name
    :return: JSON-formatted exploit results
    """
    try:
        # Run searchsploit with JSON output
        result = subprocess.run(["searchsploit", "--json", query], capture_output=True, text=True, check=True)
        exploits = json.loads(result.stdout)
        
        if "RESULTS_EXPLOIT" in exploits and exploits["RESULTS_EXPLOIT"]:
            log_message("Exploits found", "success")
            return exploits["RESULTS_EXPLOIT"]
        else:
            log_message("No exploits found for this query", "warning")
            return {"message": "No exploits found for this query."}
    
    except subprocess.CalledProcessError as e:
        log_message(f"SearchSploit command failed: {e}", "error")
        return {"error": f"SearchSploit command failed: {e}"}
    except json.JSONDecodeError:
        log_message("Failed to parse searchsploit output", "error")
        return {"error": "Failed to parse searchsploit output. Ensure Exploit-DB is installed and updated."}

def run(query):
    results = search_exploit(query)
    save_output("exploit_results.json", results)
    store_result("../reports/exploit_results.json", results)
    OutputFormatter.print_json(results)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        OutputFormatter.print_message("Usage: python -m modules.exploit_finder <CVE ID or software name>", "error")
        sys.exit(1)
    
    query = sys.argv[1]
    run(query)
